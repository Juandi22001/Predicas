// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/demo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CasosClient is the client API for Casos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CasosClient interface {
	AddCaso(ctx context.Context, in *CasoRequest, opts ...grpc.CallOption) (*Reply, error)
	ListarCasos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Casos_ListarCasosClient, error)
}

type casosClient struct {
	cc grpc.ClientConnInterface
}

func NewCasosClient(cc grpc.ClientConnInterface) CasosClient {
	return &casosClient{cc}
}

func (c *casosClient) AddCaso(ctx context.Context, in *CasoRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/grpc.Casos/AddCaso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casosClient) ListarCasos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Casos_ListarCasosClient, error) {
	stream, err := c.cc.NewStream(ctx, &Casos_ServiceDesc.Streams[0], "/grpc.Casos/ListarCasos", opts...)
	if err != nil {
		return nil, err
	}
	x := &casosListarCasosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Casos_ListarCasosClient interface {
	Recv() (*CasoReply, error)
	grpc.ClientStream
}

type casosListarCasosClient struct {
	grpc.ClientStream
}

func (x *casosListarCasosClient) Recv() (*CasoReply, error) {
	m := new(CasoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CasosServer is the server API for Casos service.
// All implementations must embed UnimplementedCasosServer
// for forward compatibility
type CasosServer interface {
	AddCaso(context.Context, *CasoRequest) (*Reply, error)
	ListarCasos(*Empty, Casos_ListarCasosServer) error
	mustEmbedUnimplementedCasosServer()
}

// UnimplementedCasosServer must be embedded to have forward compatible implementations.
type UnimplementedCasosServer struct {
}

func (UnimplementedCasosServer) AddCaso(context.Context, *CasoRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCaso not implemented")
}
func (UnimplementedCasosServer) ListarCasos(*Empty, Casos_ListarCasosServer) error {
	return status.Errorf(codes.Unimplemented, "method ListarCasos not implemented")
}
func (UnimplementedCasosServer) mustEmbedUnimplementedCasosServer() {}

// UnsafeCasosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasosServer will
// result in compilation errors.
type UnsafeCasosServer interface {
	mustEmbedUnimplementedCasosServer()
}

func RegisterCasosServer(s grpc.ServiceRegistrar, srv CasosServer) {
	s.RegisterService(&Casos_ServiceDesc, srv)
}

func _Casos_AddCaso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasosServer).AddCaso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Casos/AddCaso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasosServer).AddCaso(ctx, req.(*CasoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casos_ListarCasos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CasosServer).ListarCasos(m, &casosListarCasosServer{stream})
}

type Casos_ListarCasosServer interface {
	Send(*CasoReply) error
	grpc.ServerStream
}

type casosListarCasosServer struct {
	grpc.ServerStream
}

func (x *casosListarCasosServer) Send(m *CasoReply) error {
	return x.ServerStream.SendMsg(m)
}

// Casos_ServiceDesc is the grpc.ServiceDesc for Casos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Casos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Casos",
	HandlerType: (*CasosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCaso",
			Handler:    _Casos_AddCaso_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListarCasos",
			Handler:       _Casos_ListarCasos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/demo.proto",
}
